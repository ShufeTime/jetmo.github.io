<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leejia Blog</title>
  
  <subtitle>做了过河卒子，只能拼命向前。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.leejia.me/"/>
  <updated>2018-09-05T01:01:53.989Z</updated>
  <id>https://www.leejia.me/</id>
  
  <author>
    <name>Leejia</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>时间戳转换的几种方法</title>
    <link href="https://www.leejia.me/python/timestamp.html"/>
    <id>https://www.leejia.me/python/timestamp.html</id>
    <published>2018-09-05T00:49:57.000Z</published>
    <updated>2018-09-05T01:01:53.989Z</updated>
    
    <content type="html"><![CDATA[<h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">timestamp = <span class="number">1536108815</span>  <span class="comment"># 如果是从网页解析出来的是字符串,需要转int</span></span><br><span class="line">dateArray = datetime.datetime.utcfromtimestamp(int(timestamp))</span><br><span class="line">styletime = dateArray.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">prtint(styletime)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种</span></span><br><span class="line">ts = <span class="number">1515774430</span></span><br><span class="line">dt = time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime(ts))</span><br><span class="line">print(dt)</span><br></pre></td></tr></table></figure><h2 id="获取时间戳"><a href="#获取时间戳" class="headerlink" title="获取时间戳"></a>获取时间戳</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">t = time.time()</span><br><span class="line">print(t)</span><br></pre></td></tr></table></figure><h2 id="转时间戳"><a href="#转时间戳" class="headerlink" title="转时间戳"></a>转时间戳</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dt = <span class="string">'2018-02-01 02:40:30'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先把日期字符串转为 日期对象,然后再把日期对象转为时间戳</span></span><br><span class="line">ts = int(time.mktime(time.strptime(dt, <span class="string">"%Y-%m-%d %H:%M:%S"</span>)))</span><br><span class="line"><span class="keyword">print</span> (ts)</span><br></pre></td></tr></table></figure><blockquote><p>获取时间,获取时间戳,时间戳转化,python提供很多模块,可以多google.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;格式化&quot;&gt;&lt;a href=&quot;#格式化&quot; class=&quot;headerlink&quot; title=&quot;格式化&quot;&gt;&lt;/a&gt;格式化&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
      <category term="python" scheme="https://www.leejia.me/categories/python/"/>
    
    
      <category term="时间戳" scheme="https://www.leejia.me/tags/%E6%97%B6%E9%97%B4%E6%88%B3/"/>
    
      <category term="timetamp" scheme="https://www.leejia.me/tags/timetamp/"/>
    
      <category term="datetime" scheme="https://www.leejia.me/tags/datetime/"/>
    
      <category term="time" scheme="https://www.leejia.me/tags/time/"/>
    
  </entry>
  
  <entry>
    <title>python中url编解码问题</title>
    <link href="https://www.leejia.me/python/python_url_decode_encode.html"/>
    <id>https://www.leejia.me/python/python_url_decode_encode.html</id>
    <published>2018-09-04T01:22:05.000Z</published>
    <updated>2018-09-04T01:28:32.993Z</updated>
    
    <content type="html"><![CDATA[<h2 id="普通字符串的处理"><a href="#普通字符串的处理" class="headerlink" title="普通字符串的处理"></a>普通字符串的处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">str1 = <span class="string">'haha哈哈'</span></span><br><span class="line">str2 = parse.quote(str1)   <span class="comment">#quote()将字符串进行编码</span></span><br><span class="line">print(str2)                <span class="comment">#str2=haha%E5%93%88%E5%93%88</span></span><br><span class="line">str3 = parse.unquote(str2) <span class="comment">#解码字符串</span></span><br><span class="line">print(str3)                <span class="comment">#str3=haha哈哈</span></span><br></pre></td></tr></table></figure><h2 id="url的处理"><a href="#url的处理" class="headerlink" title="url的处理"></a>url的处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.baidu.com/s?'</span></span><br><span class="line">dict1 =&#123;<span class="string">'wd'</span>: <span class="string">'百度翻译'</span>&#125;</span><br><span class="line">url_data = parse.urlencode(dict1) <span class="comment">#unlencode()将字典&#123;k1:v1,k2:v2&#125;转化为k1=v1&amp;k2=v2</span></span><br><span class="line">print(url_data)             <span class="comment">#url_data：wd=%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91</span></span><br><span class="line"></span><br><span class="line">data = requests.get((url+url_data)).text <span class="comment">#读取url响应结果</span></span><br><span class="line">data = data.decode(<span class="string">'utf-8'</span>) <span class="comment">#将响应结果用utf8编码</span></span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url_org = parse.unquote(url_data) <span class="comment">#解码url</span></span><br><span class="line">print(url_org)              <span class="comment">#url_org：wd=百度翻译</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;普通字符串的处理&quot;&gt;&lt;a href=&quot;#普通字符串的处理&quot; class=&quot;headerlink&quot; title=&quot;普通字符串的处理&quot;&gt;&lt;/a&gt;普通字符串的处理&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
      <category term="python" scheme="https://www.leejia.me/categories/python/"/>
    
    
      <category term="unquote" scheme="https://www.leejia.me/tags/unquote/"/>
    
      <category term="quote" scheme="https://www.leejia.me/tags/quote/"/>
    
  </entry>
  
  <entry>
    <title>json和xml互转</title>
    <link href="https://www.leejia.me/tools/json2xml_xml2json.html"/>
    <id>https://www.leejia.me/tools/json2xml_xml2json.html</id>
    <published>2018-09-03T08:15:06.000Z</published>
    <updated>2018-09-03T08:19:58.420Z</updated>
    
    <content type="html"><![CDATA[<p>json和xml互转.借助的模块<code>xmltodict</code></p><h2 id="json2xml"><a href="#json2xml" class="headerlink" title="json2xml"></a>json2xml</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xmltodict</span><br><span class="line"><span class="comment">#json转xml函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jsontoxml</span><span class="params">(jsonstr)</span>:</span></span><br><span class="line">    <span class="comment">#xmltodict库的unparse()json转xml</span></span><br><span class="line">    xmlstr = xmltodict.unparse(jsonstr)</span><br><span class="line">    print(xmlstr)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    json_str = &#123;</span><br><span class="line">        <span class="string">'student'</span>: &#123;</span><br><span class="line">            <span class="string">'course'</span>: &#123;</span><br><span class="line">                <span class="string">'name'</span>: <span class="string">'math'</span>,</span><br><span class="line">                <span class="string">'score'</span>: <span class="string">'90'</span></span><br><span class="line">                &#125;,</span><br><span class="line">            <span class="string">'info'</span>: &#123;</span><br><span class="line">                <span class="string">'sex'</span>: <span class="string">'male'</span>,</span><br><span class="line">                <span class="string">'name'</span>: <span class="string">'name'</span></span><br><span class="line">                &#125;, </span><br><span class="line">            <span class="string">'stid'</span>: <span class="string">'10213'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    jsontoxml(json_str)</span><br></pre></td></tr></table></figure><h2 id="xml2json"><a href="#xml2json" class="headerlink" title="xml2json"></a>xml2json</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> xmltodict</span><br><span class="line"><span class="comment">#定义xml转json的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xmltojson</span><span class="params">(xmlstr)</span>:</span></span><br><span class="line">    <span class="comment">#parse是的xml解析器</span></span><br><span class="line">    xmlparse = xmltodict.parse(xmlstr)</span><br><span class="line">    <span class="comment">#json库dumps()是将dict转化成json格式，loads()是将json转化成dict格式。</span></span><br><span class="line">    <span class="comment">#dumps()方法的ident=1，格式化json</span></span><br><span class="line">    jsonstr = json.dumps(xmlparse,indent=<span class="number">1</span>)</span><br><span class="line">    print(jsonstr)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    xml =<span class="string">"""&lt;student&gt;</span></span><br><span class="line"><span class="string">    &lt;stid&gt;10213&lt;/stid&gt;</span></span><br><span class="line"><span class="string">    &lt;info&gt;</span></span><br><span class="line"><span class="string">        &lt;name&gt;name&lt;/name&gt;</span></span><br><span class="line"><span class="string">        &lt;sex&gt;male&lt;/sex&gt;</span></span><br><span class="line"><span class="string">    &lt;/info&gt;</span></span><br><span class="line"><span class="string">    &lt;course&gt;</span></span><br><span class="line"><span class="string">        &lt;name&gt;math&lt;/name&gt;</span></span><br><span class="line"><span class="string">        &lt;score&gt;90&lt;/score&gt;</span></span><br><span class="line"><span class="string">    &lt;/course&gt;</span></span><br><span class="line"><span class="string">&lt;/student&gt;"""</span></span><br><span class="line"></span><br><span class="line">    xmltojson(xml)  <span class="comment">#调用转换函数</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;json和xml互转.借助的模块&lt;code&gt;xmltodict&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;json2xml&quot;&gt;&lt;a href=&quot;#json2xml&quot; class=&quot;headerlink&quot; title=&quot;json2xml&quot;&gt;&lt;/a&gt;json2xml&lt;/h2&gt;&lt;fi
      
    
    </summary>
    
      <category term="tools" scheme="https://www.leejia.me/categories/tools/"/>
    
    
      <category term="json" scheme="https://www.leejia.me/tags/json/"/>
    
      <category term="xml" scheme="https://www.leejia.me/tags/xml/"/>
    
  </entry>
  
  <entry>
    <title>序列化和反序列化的底层实现原理是什么？</title>
    <link href="https://www.leejia.me/django/xuliehua_fanxuliehua.html"/>
    <id>https://www.leejia.me/django/xuliehua_fanxuliehua.html</id>
    <published>2018-09-03T07:14:10.000Z</published>
    <updated>2018-09-03T07:22:06.116Z</updated>
    
    <content type="html"><![CDATA[<p>序列化和反序列化作为Java里一个较为基础的知识点，大家心里也有那么几句要说的，但我相信很多小伙伴掌握的也就是那么几句而已，如果再深究问一下Java如何实现序列化和反序列化的，就可能不知所措了！遥记当年也被问了这一个问题，自信满满的说了一大堆，什么是序列化、什么是反序列化、什么场景的时候才会用到等，然后面试官说：那你能说一下序列化和反序列化底层是如何实现的吗？一脸懵逼，然后回家等通知！</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="1-什么是序列化和反序列化"><a href="#1-什么是序列化和反序列化" class="headerlink" title="1.什么是序列化和反序列化"></a>1.什么是序列化和反序列化</h3><p>（1) Java序列化是指把Java对象转换为字节序列的过程，而Java反序列化是指把字节序列恢复为Java对象的过程；<br>（2）序列化：对象序列化的最主要的用处就是在传递和保存对象的时候，保证对象的完整性和可传递性。序列化是把对象转换成有序字节流，以便在网络上传输或者保存在本地文件中。序列化后的字节流保存了Java对象的状态以及相关的描述信息。<code>序列化机制的核心作用就是对象状态的保存与重建。</code></p><p>（3）反序列化：客户端从文件中或网络上获得序列化后的对象字节流后，根据字节流中所保存的对象状态及描述信息，通过反序列化重建对象。</p><p>（4）本质上讲，序列化就是把实体对象状态按照一定的格式写入到有序字节流，反序列化就是从有序字节流重建对象，恢复对象状态。</p><h3 id="2-为什么需要序列化和反序列化"><a href="#2-为什么需要序列化和反序列化" class="headerlink" title="2.为什么需要序列化和反序列化"></a>2.为什么需要序列化和反序列化</h3><p>我们知道，当两个进程进行远程通信时，可以相互发送各种类型的数据，包括文本、图片、音频、视频等， 而这些数据都会以二进制序列的形式在网络上传送。</p><p>那么当两个Java进程进行通信时，能否实现进程间的对象传送呢？答案是可以的！如何做到呢？这就需要Java序列化与反序列化了！</p><p>换句话说，一方面，发送方需要把这个Java对象转换为字节序列，然后在网络上传送；另一方面，接收方需要从字节序列中恢复出Java对象。</p><p>当我们明晰了为什么需要Java序列化和反序列化后，我们很自然地会想Java序列化的好处。<br>其好处一是实现了数据的持久化，通过序列化可以把数据永久地保存到硬盘上（通常存放在文件里），二是，利用序列化实现远程通信，即在网络上传送对象的字节序列。</p><p>总的来说可以归结为以下几点：</p><p>（1）永久性保存对象，保存对象的字节序列到本地文件或者数据库中；<br>（2）通过序列化以字节流的形式使对象在网络中进行传递和接收；<br>（3）通过序列化在进程间传递对象；</p><h3 id="3-序列化算法一般会按步骤做如下事情："><a href="#3-序列化算法一般会按步骤做如下事情：" class="headerlink" title="3.序列化算法一般会按步骤做如下事情："></a>3.序列化算法一般会按步骤做如下事情：</h3><p>（1）将对象实例相关的类元数据输出。<br>（2）递归地输出类的超类描述直到不再有超类。<br>（3）类元数据完了以后，开始从最顶层的超类开始输出对象实例的实际数据值。<br>（4）从上至下递归输出实例的数据</p><p>…这里是Java序列化和反序列化的代码示例….</p><p>注: 本文摘自<a href="https://blog.csdn.net/xlgen157387/article/details/79840134" target="_blank" rel="noopener">https://blog.csdn.net/xlgen157387/article/details/79840134</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;序列化和反序列化作为Java里一个较为基础的知识点，大家心里也有那么几句要说的，但我相信很多小伙伴掌握的也就是那么几句而已，如果再深究问一下Java如何实现序列化和反序列化的，就可能不知所措了！遥记当年也被问了这一个问题，自信满满的说了一大堆，什么是序列化、什么是反序列化、
      
    
    </summary>
    
      <category term="django" scheme="https://www.leejia.me/categories/django/"/>
    
    
      <category term="序列化" scheme="https://www.leejia.me/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="反序列化" scheme="https://www.leejia.me/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="传输" scheme="https://www.leejia.me/tags/%E4%BC%A0%E8%BE%93/"/>
    
  </entry>
  
  <entry>
    <title>django开发之类视图</title>
    <link href="https://www.leejia.me/django/django_classView_decorator.html"/>
    <id>https://www.leejia.me/django/django_classView_decorator.html</id>
    <published>2018-09-01T04:28:08.000Z</published>
    <updated>2018-09-02T06:24:17.896Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Django中可以使用类来定义一个视图。称为类视图</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="string">"""类视图：处理注册"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="string">"""处理GET请求，返回注册页面"""</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'register.html'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="string">"""处理POST请求，实现注册逻辑"""</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'这里实现注册逻辑'</span>)</span><br></pre></td></tr></table></figure><h2 id="类视图使用"><a href="#类视图使用" class="headerlink" title="类视图使用"></a>类视图使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^register/$'</span>, views.RegisterView.as_view(), name=<span class="string">'register'</span>)]</span><br></pre></td></tr></table></figure><h2 id="类视图原理"><a href="#类视图原理" class="headerlink" title="类视图原理"></a>类视图原理</h2><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类视图是继承了base.py模块中非<span class="keyword">View</span>基类。下面是源码</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">View</span><span class="params">(object)</span>:</span></span><br><span class="line">    ...省略</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classonlymethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">as_view</span><span class="params">(cls, **initkwargs)</span>:</span>  <span class="comment"># 因为我们定义的类视图，就是继承View类。所有这里cls就是指代我们定义的类对象。</span></span><br><span class="line">        ...省略</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(request, *args, **kwargs)</span>:</span></span><br><span class="line">            self = cls(**initkwargs)</span><br><span class="line">            <span class="keyword">if</span> hasattr(self, <span class="string">'get'</span>) <span class="keyword">and</span> <span class="keyword">not</span> hasattr(self, <span class="string">'head'</span>):</span><br><span class="line">                self.head = self.get</span><br><span class="line">            self.request = request</span><br><span class="line">            self.args = args</span><br><span class="line">            self.kwargs = kwargs</span><br><span class="line">            <span class="keyword">return</span> self.dispatch(request, *args, **kwargs)</span><br><span class="line">       ...省略</span><br><span class="line">        <span class="keyword">return</span> view  <span class="comment"># 返回真正的视图函数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># Try to dispatch to the right method; if a method doesn't exist,</span></span><br><span class="line">        <span class="comment"># defer to the error handler. Also defer to the error handler if the</span></span><br><span class="line">        <span class="comment"># request method isn't on the approved list.</span></span><br><span class="line">        <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">            handler = getattr(self, request.method.lower(), self.http_method_not_allowed)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            handler = self.http_method_not_allowed</span><br><span class="line">        <span class="keyword">return</span> handler(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    ...省略</span><br></pre></td></tr></table></figure><h2 id="类视图使用装饰器"><a href="#类视图使用装饰器" class="headerlink" title="类视图使用装饰器"></a>类视图使用装饰器</h2><h3 id="方法一-【在url配置中装饰】"><a href="#方法一-【在url配置中装饰】" class="headerlink" title="方法一   【在url配置中装饰】"></a>方法一   【<strong>在url配置中装饰</strong>】</h3><p>（类视图下所有请求方法都会被装饰【因为是在视图入口处，分发请求之前】  缺点： 单看视图无法知道添加了装饰器，不利于代码的完整性。）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一步定义一个装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 这里做一些额外的事情</span></span><br><span class="line">        print(<span class="string">"自定义装饰器被调用了。。"</span>)</span><br><span class="line">        <span class="keyword">return</span> func(request, *args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二步定一个类视图</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoView</span><span class="params">(View)</span>:</span> <span class="comment"># 继承自View这个基类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"get...ok"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"post...ok"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 第三步， 在url配置中装饰</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^demo/$'</span>, my_decorate(DemoView.as_view()))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="方法二-【类视图中装饰】"><a href="#方法二-【类视图中装饰】" class="headerlink" title="方法二   【类视图中装饰】"></a>方法二   【<strong>类视图中装饰</strong>】</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类视图中装饰的第一种</span></span><br><span class="line"><span class="comment"># 为全部请求方法添加装饰器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoView</span><span class="params">(View)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># methos_decorator()做了什么事情？处理了self,因为类中第一个变量都是self</span></span><br><span class="line">    <span class="comment"># 所以还可以直接在装饰器中，参数第一个位置添加self 而不用methos_decorator()</span></span><br><span class="line"><span class="meta">    @method_decorator(my_decorator)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> super().dispatch(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'get方法'</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'post方法'</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类视图中装饰的第二种</span></span><br><span class="line"><span class="comment"># 为特定请求方法添加装饰器</span></span><br><span class="line"><span class="comment"># 注意这里因为给特定方法添加装饰器，所以不需要复写父类方法。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoView</span><span class="params">(View)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @method_decorator(my_decorator)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'get方法'</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'post方法'</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 类视图中装饰的第三种</span></span><br><span class="line"><span class="comment"># 为全部请求方法添加装饰器</span></span><br><span class="line"><span class="meta">@method_decorator(my_decorator, name='dispatch')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'get方法'</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'post方法'</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类视图中装饰的第四种</span></span><br><span class="line"><span class="comment"># 为特定请求方法添加装饰器</span></span><br><span class="line"><span class="meta">@method_decorator(my_decorator, name='get')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'get方法'</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'post方法'</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure><blockquote><h4 id="为什么需要使用method-decorator-在上面已经做了说明。下面用代码详细阐述一下。"><a href="#为什么需要使用method-decorator-在上面已经做了说明。下面用代码详细阐述一下。" class="headerlink" title="为什么需要使用method_decorator? 在上面已经做了说明。下面用代码详细阐述一下。"></a>为什么需要使用method_decorator? 在上面已经做了说明。下面用代码详细阐述一下。</h4></blockquote><p>为函数视图准备的装饰器，其被调用时，第一个参数用于接收request对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_decorate</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(request, *args, **kwargs)</span>:</span>  <span class="comment"># 第一个参数request对象</span></span><br><span class="line">        ...代码省略...</span><br><span class="line">        <span class="keyword">return</span> func(request, *args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>而类视图中请求方法被调用时，传入的第一个参数不是request对象，而是self 视图对象本身，第二个位置参数才是request对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        ...代码省略...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        ...代码省略...</span><br></pre></td></tr></table></figure><p>所以如果直接将用于函数视图的装饰器装饰类视图方法，会导致参数传递出现问题。</p><blockquote><p>method_decorator的作用是为函数视图装饰器补充第一个self参数，以适配类视图方法。</p></blockquote><p>如果将装饰器本身改为可以适配类视图方法的，类似如下，则无需再使用method_decorator。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(self, request, *args, **kwargs)</span>:</span>  <span class="comment"># 此处增加了self</span></span><br><span class="line">        print(<span class="string">'自定义装饰器被调用了'</span>)</span><br><span class="line">        print(<span class="string">'请求路径%s'</span> % request.path)</span><br><span class="line">        <span class="keyword">return</span> func(self, request, *args, **kwargs)  <span class="comment"># 此处增加了self</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><h3 id="方法三-构造Mixin扩展类"><a href="#方法三-构造Mixin扩展类" class="headerlink" title="方法三  构造Mixin扩展类"></a>方法三  构造Mixin扩展类</h3><p>（使用面向对象多继承的特性， 可以给多个类使用装饰器  所有请求方法否会添加装饰行为）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构造Mixin扩展类 不管有几个扩展类，都要继承object类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDecoratorMixin</span><span class="params">(object)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 重写父类的as_view()方法</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">as_view</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 调用父类的as_view()类方法</span></span><br><span class="line">        view = super().as_view(*args, **kwargs)</span><br><span class="line">        <span class="comment"># 使用装饰器重写父类的as_view()类方法</span></span><br><span class="line">        view = my_decorator(view)</span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 定义类视图，注意需要继承Mixin扩展类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoView</span><span class="params">(MyDecoratorMixin, View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'get方法'</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'post方法'</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Django中可以使用类来定义一个视图。称为类视图&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=
      
    
    </summary>
    
      <category term="django" scheme="https://www.leejia.me/categories/django/"/>
    
    
      <category term="django" scheme="https://www.leejia.me/tags/django/"/>
    
      <category term="类视图" scheme="https://www.leejia.me/tags/%E7%B1%BB%E8%A7%86%E5%9B%BE/"/>
    
      <category term="装饰器" scheme="https://www.leejia.me/tags/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
      <category term="as_view" scheme="https://www.leejia.me/tags/as-view/"/>
    
  </entry>
  
  <entry>
    <title>mkvirtualenv创建虚拟环境报错没有stevedore模块解决方案</title>
    <link href="https://www.leejia.me/virtualenv/mkvirtualenv-stevedore-error.html"/>
    <id>https://www.leejia.me/virtualenv/mkvirtualenv-stevedore-error.html</id>
    <published>2018-08-30T04:57:41.000Z</published>
    <updated>2018-08-30T10:53:35.123Z</updated>
    
    <content type="html"><![CDATA[<h3 id="事发有因"><a href="#事发有因" class="headerlink" title="事发有因"></a>事发有因</h3><p>一直以来我都是使用<code>virtualenv venv</code>来创建虚拟环境的.然后使用<code>source venv/bin/activate</code>激活虚拟环境. 虚拟环境越来越多,于是尝试使用<code>virtualenvwrapper</code>来管理虚拟环境.<code>pip install virtualenvwrapper</code> 没有问题.但是使用<code>mkvirtualenv</code>创建虚拟环境出现如下错误:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">JetmodeMacBook-Pro➜  ~  ᐅ  mkvirtualenv dj -p python3</span><br><span class="line">Already using interpreter /Library/Frameworks/Python.framework/Versions/<span class="number">3.6</span>/bin/python3</span><br><span class="line">Using base prefix <span class="string">'/Library/Frameworks/Python.framework/Versions/3.6'</span></span><br><span class="line">New python executable <span class="keyword">in</span> /Users/jetmo/.virtualenvs/dj/bin/python3</span><br><span class="line">Also creating executable <span class="keyword">in</span> /Users/jetmo/.virtualenvs/dj/bin/python</span><br><span class="line">Installing setuptools, pip, wheel...done.</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/runpy.py"</span>, line <span class="number">174</span>, <span class="keyword">in</span> _run_module_as_main</span><br><span class="line">    <span class="string">"__main__"</span>, fname, loader, pkg_name)</span><br><span class="line">  File <span class="string">"/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/runpy.py"</span>, line <span class="number">72</span>, <span class="keyword">in</span> _run_code</span><br><span class="line">    <span class="keyword">exec</span> code <span class="keyword">in</span> run_globals</span><br><span class="line">  File <span class="string">"/usr/local/lib/python2.7/site-packages/virtualenvwrapper-4.8.2-py2.7.egg/virtualenvwrapper/hook_loader.py"</span>, line <span class="number">16</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> stevedore <span class="keyword">import</span> ExtensionManager</span><br><span class="line">ImportError: No module named stevedore</span><br></pre></td></tr></table></figure><h3 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h3><p>原因是缺少<code>stevedore</code>模块.直接安装会继续报错,多次尝试后找到了解决办法.</p><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><p><strong>使用pip2安装</strong>很多同学应该都是默认pip3版本,但是这个模块一定要使用pip2安装(我是这样的). zsh中键入pip后两次tab键找到选择pip2<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pip2 uninstall stevedore <span class="comment"># 先卸载</span></span><br><span class="line">sudo pip2 install stevedore <span class="comment"># 再安装</span></span><br></pre></td></tr></table></figure></p><p>然后再使用<code>mkvirtualenv django_py3 -p python3</code> 安装虚拟环境就不会报错了.</p><h3 id="延伸-虚拟环境"><a href="#延伸-虚拟环境" class="headerlink" title="延伸(虚拟环境)"></a>延伸(虚拟环境)</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install virtualenv</span><br><span class="line">sudo pip3 install virtualenvwrapper</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、创建目录用来存放虚拟环境</span></span><br><span class="line">mkdir </span><br><span class="line"><span class="variable">$HOME</span>/.virtualenvs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、打开~/.bashrc文件，并添加如下：</span></span><br><span class="line"><span class="built_in">export</span> WORKON_HOME=<span class="variable">$HOME</span>/.virtualenvs</span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/bin/virtualenvwrapper.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、运行</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h4 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv -<span class="selector-tag">p</span> python3 虚拟环境名称</span><br></pre></td></tr></table></figure><h4 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">workon</span> 虚拟环境名称</span><br></pre></td></tr></table></figure><h4 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deactivate</span></span><br></pre></td></tr></table></figure><h4 id="删除虚拟环境"><a href="#删除虚拟环境" class="headerlink" title="删除虚拟环境"></a>删除虚拟环境</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rmvirtualenv</span> 虚拟环境名称</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;事发有因&quot;&gt;&lt;a href=&quot;#事发有因&quot; class=&quot;headerlink&quot; title=&quot;事发有因&quot;&gt;&lt;/a&gt;事发有因&lt;/h3&gt;&lt;p&gt;一直以来我都是使用&lt;code&gt;virtualenv venv&lt;/code&gt;来创建虚拟环境的.然后使用&lt;code&gt;so
      
    
    </summary>
    
      <category term="virtualenv" scheme="https://www.leejia.me/categories/virtualenv/"/>
    
    
      <category term="stevedore" scheme="https://www.leejia.me/tags/stevedore/"/>
    
      <category term="virtualenv" scheme="https://www.leejia.me/tags/virtualenv/"/>
    
  </entry>
  
  <entry>
    <title>最简单的django程序</title>
    <link href="https://www.leejia.me/django/tiny-django-app.html"/>
    <id>https://www.leejia.me/django/tiny-django-app.html</id>
    <published>2018-08-30T02:47:00.000Z</published>
    <updated>2018-08-30T02:47:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最简单的django程序.包含创建工程,创建一个app,配置url,编辑视图函数, 注册app</p></blockquote><h3 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject django_demo</span><br><span class="line"><span class="built_in">cd</span> django_demo</span><br></pre></td></tr></table></figure><h3 id="创建app"><a href="#创建app" class="headerlink" title="创建app"></a>创建app</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp users</span><br></pre></td></tr></table></figure><h3 id="注册app"><a href="#注册app" class="headerlink" title="注册app"></a>注册app</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在settings.py中</span></span><br><span class="line">users.apps.UsersConfig</span><br></pre></td></tr></table></figure><h3 id="编辑视图函数"><a href="#编辑视图函数" class="headerlink" title="编辑视图函数"></a>编辑视图函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app中 views模块中</span></span><br><span class="line">from django.http import HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">    视图函数</span></span><br><span class="line"><span class="string">    :param request: django 默认的第一个参数,用户接收request请求</span></span><br><span class="line"><span class="string">    :return: 响应对象</span></span><br><span class="line"><span class="string">    "</span><span class="string">""</span></span><br><span class="line">    <span class="built_in">return</span> HttpResponse(<span class="string">"这是用户界面"</span>)</span><br></pre></td></tr></table></figure><h3 id="添加视图url"><a href="#添加视图url" class="headerlink" title="添加视图url"></a>添加视图url</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app中创建urls模块</span></span><br><span class="line">from django.conf.urls import url</span><br><span class="line"></span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># url(路径, 视图)</span></span><br><span class="line">    url(r<span class="string">'^index/$'</span>, views.index),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="url前缀"><a href="#url前缀" class="headerlink" title="url前缀"></a>url前缀</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在全局urls中配置app</span></span><br><span class="line">from django.conf.urls import url, include</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类比flask中蓝图前缀</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    url(r<span class="string">'^users/'</span>, include(<span class="string">'users.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="启动工程"><a href="#启动工程" class="headerlink" title="启动工程"></a>启动工程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/users/index</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最简单的django程序.包含创建工程,创建一个app,配置url,编辑视图函数, 注册app&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;创建工程&quot;&gt;&lt;a href=&quot;#创建工程&quot; class=&quot;headerlink&quot; title=&quot;创建
      
    
    </summary>
    
      <category term="django" scheme="https://www.leejia.me/categories/django/"/>
    
    
      <category term="django" scheme="https://www.leejia.me/tags/django/"/>
    
      <category term="python" scheme="https://www.leejia.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>centos下启动flask程序</title>
    <link href="https://www.leejia.me/flask/centos-start-flask.html"/>
    <id>https://www.leejia.me/flask/centos-start-flask.html</id>
    <published>2018-08-29T06:49:24.000Z</published>
    <updated>2018-08-30T10:53:09.216Z</updated>
    
    <content type="html"><![CDATA[<h4 id="centos系统下安装ngnix-负责转发"><a href="#centos系统下安装ngnix-负责转发" class="headerlink" title="centos系统下安装ngnix(负责转发)"></a>centos系统下安装ngnix(负责转发)</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> ngnix</span><br></pre></td></tr></table></figure><h4 id="配置ngnix"><a href="#配置ngnix" class="headerlink" title="配置ngnix"></a>配置ngnix</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">配置文件路径: <span class="regexp">/etc/</span>nginx<span class="regexp">/nginx.conf</span></span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果是多台服务器的话，则在此配置，并修改 location 节点下面的 proxy_pass </span></span><br><span class="line"><span class="attribute">upstream</span> flask &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.1:5000</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.1:5001</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="comment"># 监听80端口</span></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span> default_server;</span><br><span class="line">        <span class="attribute">listen</span> [::]:<span class="number">80</span> default_server;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">root</span> /var/www/html;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">index</span> index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">server_name</span> _;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">                <span class="comment"># 请求转发到gunicorn服务器</span></span><br><span class="line">                <span class="attribute">proxy_pass</span> http://127.0.0.1:5000;</span><br><span class="line">                <span class="comment"># 请求转发到多个gunicorn服务器</span></span><br><span class="line">                <span class="comment"># proxy_pass http://flask;</span></span><br><span class="line">                <span class="comment"># 设置请求头，并将头信息传递给服务器端 </span></span><br><span class="line">                <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">                <span class="comment"># 设置请求头，传递原始请求ip给 gunicorn 服务器</span></span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>启动ngnix服务器</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -c <span class="regexp">/etc/</span>nginx<span class="regexp">/nginx.conf</span></span><br></pre></td></tr></table></figure></li><li><p>python虚拟环境中安装 Gunicorn(wsgi协议的服务器)</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> Gunicorn</span><br></pre></td></tr></table></figure></li><li><p>启动Gunicorn</p></li></ol><ul><li>进入flask程序的启动文件所在文件夹.比如我的启动文件是manage.py<br>那么运行命令就是:<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">gunicorn</span> <span class="selector-tag">-w</span> 2 <span class="selector-tag">-b</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:5000</span> <span class="selector-tag">manage</span><span class="selector-pseudo">:app</span> <span class="selector-tag">-D</span> <span class="selector-tag">--reload</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">参数含义: -D表示后台运行. <span class="comment">--reload表示重启Gunicorn.已经运行的会重新启动不必要去kill进程.</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;centos系统下安装ngnix-负责转发&quot;&gt;&lt;a href=&quot;#centos系统下安装ngnix-负责转发&quot; class=&quot;headerlink&quot; title=&quot;centos系统下安装ngnix(负责转发)&quot;&gt;&lt;/a&gt;centos系统下安装ngnix(负责转发)
      
    
    </summary>
    
      <category term="flask" scheme="https://www.leejia.me/categories/flask/"/>
    
    
      <category term="flask" scheme="https://www.leejia.me/tags/flask/"/>
    
      <category term="ngnix" scheme="https://www.leejia.me/tags/ngnix/"/>
    
  </entry>
  
  <entry>
    <title>关于centos操作系统安装mysqlclient失败的解决方案</title>
    <link href="https://www.leejia.me/flask/mysqlclientpython.html"/>
    <id>https://www.leejia.me/flask/mysqlclientpython.html</id>
    <published>2018-08-29T01:50:19.000Z</published>
    <updated>2018-08-30T10:50:54.923Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用CentOS基本源安装Python2链接库"><a href="#使用CentOS基本源安装Python2链接库" class="headerlink" title="使用CentOS基本源安装Python2链接库"></a>使用CentOS基本源安装Python2链接库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install python-devel</span><br></pre></td></tr></table></figure><h4 id="使用CentOS-EPEL源安装Python3对应版本的链接库包"><a href="#使用CentOS-EPEL源安装Python3对应版本的链接库包" class="headerlink" title="使用CentOS EPEL源安装Python3对应版本的链接库包"></a>使用CentOS EPEL源安装Python3对应版本的链接库包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install python34-devel</span><br></pre></td></tr></table></figure><p>现在再安装<code>mysqlclient</code>就不会出现<code>编译中断。</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: <span class="built_in">command</span> <span class="string">'gcc'</span> failed with <span class="built_in">exit</span> status 1</span><br></pre></td></tr></table></figure><p>这样的错误了. 安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mysqlclient</span><br></pre></td></tr></table></figure><h4 id="后续再安装Flask-MySQLdb-也不会报错啦"><a href="#后续再安装Flask-MySQLdb-也不会报错啦" class="headerlink" title="后续再安装Flask-MySQLdb 也不会报错啦."></a>后续再安装<code>Flask-MySQLdb</code> 也不会报错啦.</h4><p>安装:    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-mysqldb</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;使用CentOS基本源安装Python2链接库&quot;&gt;&lt;a href=&quot;#使用CentOS基本源安装Python2链接库&quot; class=&quot;headerlink&quot; title=&quot;使用CentOS基本源安装Python2链接库&quot;&gt;&lt;/a&gt;使用CentOS基本源安装Pyth
      
    
    </summary>
    
      <category term="flask" scheme="https://www.leejia.me/categories/flask/"/>
    
    
      <category term="flask" scheme="https://www.leejia.me/tags/flask/"/>
    
      <category term="mysqlclient" scheme="https://www.leejia.me/tags/mysqlclient/"/>
    
  </entry>
  
  <entry>
    <title>关于centos操作系统安装MySQL-python失败的解决方案</title>
    <link href="https://www.leejia.me/flask/centos-have-no-mysql.html"/>
    <id>https://www.leejia.me/flask/centos-have-no-mysql.html</id>
    <published>2018-08-29T01:42:03.000Z</published>
    <updated>2018-08-30T10:50:39.476Z</updated>
    
    <content type="html"><![CDATA[<p>flask迁移数据库的时候会出现.找不到mysqldb模块这样的情况.在centos系统上方案一就可以有效解决.但是在ubuntu 16.04上推荐优先使用方案二.</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><pre><code>MySQLdb不支持python3.x</code></pre><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>centos 使用yum 是找不到YSQL-python这个包的.所以需要下载安装包执行安装.</p><p>安装完依赖包后，开始安装MYSQL-python：</p><p>1、下载tar包：</p><p>执行：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>pypi.python.org<span class="regexp">/packages/</span>c8<span class="regexp">/8f/</span>aedf47a2e973a2d2f225ac98537472fc928ad61b9647fb370870404c594b<span class="regexp">/MySQL-python-1.2.3c1.tar.gz#md5=310dd856e439d070b59ece6dd7a0734d</span></span><br></pre></td></tr></table></figure><p>完成tar下载</p><p>2、解压执行：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-xzvf</span>  <span class="selector-tag">MySQL-python-1</span><span class="selector-class">.2</span><span class="selector-class">.3c1</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure><p>进入解压之后的文件夹根目录</p><p>3、编译(用python2 如果在python3虚拟环境请退出虚拟环境)</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup<span class="selector-class">.py</span> build</span><br></pre></td></tr></table></figure><p>4、安装(用python2 如果在python3虚拟环境请退出虚拟环境)</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup<span class="selector-class">.py</span> install</span><br></pre></td></tr></table></figure><p>经过上述步骤就完成了MySQL-python</p><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p>如果还是不能解决问题可以尝试:用pymysql来代替MySQLdb<br>具体位置:<code>__init.py__</code>,<code>manage.py</code><br><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="title">pymysql</span>.install_as_MySQLdb()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;flask迁移数据库的时候会出现.找不到mysqldb模块这样的情况.在centos系统上方案一就可以有效解决.但是在ubuntu 16.04上推荐优先使用方案二.&lt;/p&gt;
&lt;h2 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="flask" scheme="https://www.leejia.me/categories/flask/"/>
    
    
      <category term="centos" scheme="https://www.leejia.me/tags/centos/"/>
    
      <category term="MYSQL-python" scheme="https://www.leejia.me/tags/MYSQL-python/"/>
    
      <category term="mysql" scheme="https://www.leejia.me/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.leejia.me/life/hello-world.html"/>
    <id>https://www.leejia.me/life/hello-world.html</id>
    <published>2018-08-16T05:04:29.784Z</published>
    <updated>2018-08-30T10:52:34.209Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="life" scheme="https://www.leejia.me/categories/life/"/>
    
    
  </entry>
  
  <entry>
    <title>git基本命令</title>
    <link href="https://www.leejia.me/git/git.html"/>
    <id>https://www.leejia.me/git/git.html</id>
    <published>2018-08-16T04:56:12.000Z</published>
    <updated>2018-08-30T10:52:45.366Z</updated>
    
    <content type="html"><![CDATA[<ul><li>git init 初始化git,当前文件夹使用git管理</li><li>git add . 添加到暂存区</li><li>git commit -m “修改明细”  提交到本地仓库</li><li>git status 查看状态</li><li>git push 推送到远程服务器</li><li>git pull 从远程服务器拉取代码</li></ul><hr><ul><li>git log / reflog 查看日记</li><li>git reset HEAD^  回退到上一个版本或者指定版本</li><li>git reset –hard 589e122 回退到指定版本</li><li>git diff  对比</li><li>git rm 删除</li><li>git checkout 检查</li></ul><hr><blockquote><p>标签</p></blockquote><ul><li>git tag -a v1.0 -m “version 1.0” 给项目打标签</li><li>git push origin v1.0  push到远程服务器</li></ul><hr><ul><li>git brach 查看当前分支</li><li>git checkout -b dev  创建dev 分支</li><li>git push -u origin dev 把当前分支同步到服务器</li><li>git checkout master  切换分支</li><li>git merge dev 合并分支</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;git init 初始化git,当前文件夹使用git管理&lt;/li&gt;
&lt;li&gt;git add . 添加到暂存区&lt;/li&gt;
&lt;li&gt;git commit -m “修改明细”  提交到本地仓库&lt;/li&gt;
&lt;li&gt;git status 查看状态&lt;/li&gt;
&lt;li&gt;git
      
    
    </summary>
    
      <category term="git" scheme="https://www.leejia.me/categories/git/"/>
    
    
      <category term="git" scheme="https://www.leejia.me/tags/git/"/>
    
      <category term="github" scheme="https://www.leejia.me/tags/github/"/>
    
  </entry>
  
</feed>
